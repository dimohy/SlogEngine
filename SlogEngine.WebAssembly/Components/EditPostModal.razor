@using SlogEngine.WebAssembly.Models
@using SlogEngine.WebAssembly.Services
@inject IImageService ImageService
@inject IClipboardService ClipboardService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<Modal Title="@ModalTitle" ShowActions="true" ConfirmText="@ConfirmButtonText" OnClose="CancelEdit" OnConfirm="SavePost">
    <ChildContent>
        <EditForm Model="@editingPost">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="edit-title">제목</label>
                <InputText id="edit-title" @bind-Value="editingPost!.Title" class="form-control" placeholder="포스트 제목을 입력하세요" />
            </div>

            <div class="form-group">
                <label for="edit-summary">요약</label>
                <InputTextArea id="edit-summary" @bind-Value="editingPost!.Summary" class="form-control" rows="4" placeholder="포스트 요약을 입력하세요" />
            </div>

            <div class="form-group">
                <label for="edit-content">내용</label>
                <InputTextArea id="edit-content" @bind-Value="editingPost!.Content" class="form-control" rows="12" placeholder="포스트 내용을 마크다운으로 작성하세요. 이미지는 Ctrl+V로 붙여넣기 가능합니다." />
                @if (isUploadingImage)
                {
                    <div class="image-upload-progress">
                        <small class="text-info">이미지 업로드 중...</small>
                    </div>
                }
            </div>
        </EditForm>
    </ChildContent>
</Modal>

@code {
    [Parameter] public BlogPost? editingPost { get; set; }
    [Parameter] public EventCallback<BlogPost> OnUpdate { get; set; }
    [Parameter] public EventCallback<BlogPost> OnAdd { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsNewPost { get; set; } = false;

    private string ModalTitle => IsNewPost ? "새 포스트 추가" : "포스트 수정";
    private string ConfirmButtonText => IsNewPost ? "추가" : "저장";
    private bool isUploadingImage = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // DOM이 완전히 로드될 때까지 약간 대기
                await Task.Delay(100);
                
                await ClipboardService.RegisterPasteListenerAsync("edit-content", OnImageUploadCallback);
                Console.WriteLine("클립보드 리스너가 성공적으로 등록되었습니다.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"클립보드 리스너 등록 실패: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// 이미지 업로드 콜백 함수입니다.
    /// </summary>
    private Task OnImageUploadCallback(string placeholder, string newImageMarkdown, string imageUrl)
    {
        // editingPost.Content의 placeholder를 실제 이미지 마크다운으로 교체
        if (editingPost != null && !string.IsNullOrEmpty(editingPost.Content))
        {
            editingPost.Content = editingPost.Content.Replace(placeholder, newImageMarkdown);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private async Task SavePost()
    {
        if (editingPost != null)
        {
            if (IsNewPost)
            {
                Console.WriteLine($"EditPostModal.SavePost: Adding new post with title: {editingPost.Title}");
                await OnAdd.InvokeAsync(editingPost);
            }
            else
            {
                Console.WriteLine($"EditPostModal.SavePost: Updating post {editingPost.Id} with title: {editingPost.Title}");
                await OnUpdate.InvokeAsync(editingPost);
            }
        }
        else
        {
            Console.WriteLine("EditPostModal.SavePost: editingPost is null");
        }
    }

    private async Task CancelEdit()
    {
        await OnCancel.InvokeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await ClipboardService.RemovePasteListenerAsync("edit-content");
            Console.WriteLine("클립보드 리스너가 성공적으로 제거되었습니다.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"클립보드 리스너 제거 중 오류: {ex.Message}");
        }
    }
}
