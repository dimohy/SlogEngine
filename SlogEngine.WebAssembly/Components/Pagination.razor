@using SlogEngine.WebAssembly.Models

<div class="pagination-container">
    @if (Result != null && Result.TotalPages > 1)
    {
        <nav aria-label="페이지 네비게이션" class="pagination-nav">
            <div class="pagination-controls">
                <!-- 첫 페이지 -->
                <button class="pagination-btn pagination-btn-nav @(Result.CurrentPage == 1 ? "disabled" : "")" 
                        @onclick="() => GoToPage(1)" 
                        disabled="@(Result.CurrentPage == 1)"
                        title="첫 페이지">
                    <span class="pagination-icon">«</span>
                </button>

                <!-- 이전 페이지 -->
                <button class="pagination-btn pagination-btn-nav @(!Result.HasPreviousPage ? "disabled" : "")" 
                        @onclick="() => GoToPage(Result.CurrentPage - 1)" 
                        disabled="@(!Result.HasPreviousPage)"
                        title="이전 페이지">
                    <span class="pagination-icon">‹</span>
                </button>

                <!-- 페이지 번호들 -->
                <div class="pagination-numbers">
                    @for (int page = GetStartPage(); page <= GetEndPage(); page++)
                    {
                        int currentPage = page; // closure 문제 방지
                        <button class="pagination-btn pagination-btn-number @(Result.CurrentPage == currentPage ? "active" : "")" 
                                @onclick="() => GoToPage(currentPage)"
                                title="@currentPage 페이지">
                            @currentPage
                        </button>
                    }
                </div>

                <!-- 다음 페이지 -->
                <button class="pagination-btn pagination-btn-nav @(!Result.HasNextPage ? "disabled" : "")" 
                        @onclick="() => GoToPage(Result.CurrentPage + 1)" 
                        disabled="@(!Result.HasNextPage)"
                        title="다음 페이지">
                    <span class="pagination-icon">›</span>
                </button>

                <!-- 마지막 페이지 -->
                <button class="pagination-btn pagination-btn-nav @(Result.CurrentPage == Result.TotalPages ? "disabled" : "")" 
                        @onclick="() => GoToPage(Result.TotalPages)" 
                        disabled="@(Result.CurrentPage == Result.TotalPages)"
                        title="마지막 페이지">
                    <span class="pagination-icon">»</span>
                </button>
            </div>
        </nav>

        <!-- 페이지 정보 표시 -->
        <div class="pagination-info">
            <span class="pagination-summary">
                <strong>@((Result.CurrentPage - 1) * Result.PageSize + 1)</strong>-<strong>@Math.Min(Result.CurrentPage * Result.PageSize, Result.TotalCount)</strong> 
                of <strong>@Result.TotalCount</strong> items
            </span>
            <span class="pagination-details">
                Page @Result.CurrentPage of @Result.TotalPages
            </span>
        </div>
    }
</div>

<style>
    .pagination-container {
        margin: 3rem 0 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1.5rem;
    }

    .pagination-nav {
        display: flex;
        justify-content: center;
    }

    .pagination-controls {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        background: var(--bg-secondary);
        padding: 0.5rem;
        border-radius: 1rem;
        border: 1px solid var(--border-color);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }

    .pagination-numbers {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        margin: 0 0.25rem;
    }

    .pagination-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 2.5rem;
        height: 2.5rem;
        border: none;
        border-radius: 0.75rem;
        background: transparent;
        color: var(--text-secondary);
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .pagination-btn::before {
        content: '';
        position: absolute;
        inset: 0;
        background: var(--accent-color);
        opacity: 0;
        transition: opacity 0.2s ease;
        border-radius: inherit;
    }

    .pagination-btn:hover:not(.disabled):not(.active) {
        background: var(--bg-primary);
        color: var(--text-primary);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .pagination-btn.active {
        background: var(--accent-color);
        color: var(--text-on-accent);
        font-weight: 600;
        box-shadow: 0 4px 16px rgba(var(--accent-color-rgb, 59, 130, 246), 0.3);
    }

    .pagination-btn.active::before {
        opacity: 0.1;
    }

    .pagination-btn.disabled {
        color: var(--text-muted);
        cursor: not-allowed;
        opacity: 0.5;
    }

    .pagination-btn.disabled:hover {
        transform: none;
        box-shadow: none;
        background: transparent;
    }

    .pagination-btn-nav {
        min-width: 2.25rem;
        height: 2.25rem;
    }

    .pagination-btn-number {
        min-width: 2.5rem;
        font-variant-numeric: tabular-nums;
    }

    .pagination-icon {
        font-size: 1rem;
        line-height: 1;
    }

    .pagination-info {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
        text-align: center;
    }

    .pagination-summary {
        font-size: 0.875rem;
        color: var(--text-primary);
        font-weight: 500;
    }

    .pagination-details {
        font-size: 0.75rem;
        color: var(--text-secondary);
        padding: 0.25rem 0.75rem;
        background: var(--bg-secondary);
        border-radius: 1rem;
        border: 1px solid var(--border-color);
    }

    /* 호버 애니메이션 */
    .pagination-btn:hover:not(.disabled) .pagination-icon {
        transform: scale(1.1);
    }

    .pagination-btn.active {
        animation: activePagePulse 2s ease-in-out infinite;
    }

    @@keyframes activePagePulse {
        0%, 100% {
            box-shadow: 0 4px 16px rgba(var(--accent-color-rgb, 59, 130, 246), 0.3);
        }
        50% {
            box-shadow: 0 4px 20px rgba(var(--accent-color-rgb, 59, 130, 246), 0.4);
        }
    }

    /* 모바일 반응형 */
    @@media (max-width: 576px) {
        .pagination-container {
            margin: 2rem 0 1.5rem;
            gap: 1rem;
        }

        .pagination-controls {
            padding: 0.375rem;
            gap: 0.125rem;
        }

        .pagination-numbers {
            margin: 0 0.125rem;
            gap: 0.125rem;
        }

        .pagination-btn {
            min-width: 2rem;
            height: 2rem;
            font-size: 0.8rem;
        }

        .pagination-btn-nav {
            min-width: 1.875rem;
            height: 1.875rem;
        }

        .pagination-btn-number {
            min-width: 2rem;
        }

        .pagination-icon {
            font-size: 0.875rem;
        }

        .pagination-summary {
            font-size: 0.8rem;
        }

        .pagination-details {
            font-size: 0.7rem;
        }
    }

    /* 다크 테마 지원 */
    @@media (prefers-color-scheme: dark) {
        .pagination-controls {
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
        }

        .pagination-btn:hover:not(.disabled):not(.active) {
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
        }
    }

    /* 고해상도 디스플레이 지원 */
    @@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
        .pagination-btn {
            border: 0.5px solid transparent;
        }
    }
</style>

@code {
    /// <summary>
    /// 페이징 결과 데이터
    /// </summary>
    [Parameter] public PagedResult<BlogPost>? Result { get; set; }

    /// <summary>
    /// 페이지 변경 이벤트 콜백
    /// </summary>
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    /// <summary>
    /// 한 번에 표시할 페이지 번호 개수
    /// </summary>
    [Parameter] public int PageNumbersToShow { get; set; } = 5;

    /// <summary>
    /// 지정된 페이지로 이동합니다.
    /// </summary>
    /// <param name="page">이동할 페이지 번호</param>
    private async Task GoToPage(int page)
    {
        if (Result == null || page < 1 || page > Result.TotalPages || page == Result.CurrentPage)
            return;

        await OnPageChanged.InvokeAsync(page);
    }

    /// <summary>
    /// 표시할 시작 페이지 번호를 계산합니다.
    /// </summary>
    /// <returns>시작 페이지 번호</returns>
    private int GetStartPage()
    {
        if (Result == null) return 1;

        var start = Result.CurrentPage - (PageNumbersToShow / 2);
        return Math.Max(1, start);
    }

    /// <summary>
    /// 표시할 끝 페이지 번호를 계산합니다.
    /// </summary>
    /// <returns>끝 페이지 번호</returns>
    private int GetEndPage()
    {
        if (Result == null) return 1;

        var end = GetStartPage() + PageNumbersToShow - 1;
        return Math.Min(Result.TotalPages, end);
    }
}
