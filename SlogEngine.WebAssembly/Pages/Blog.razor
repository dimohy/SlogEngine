@page "/blog/{userId}"
@layout BlogLayout
@using SlogEngine.WebAssembly.Models
@using SlogEngine.WebAssembly.Services
@using SlogEngine.WebAssembly.Components
@using System.Web
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject BlogApiService BlogApiService
@inject IMarkdownService MarkdownService

<div class="blog-container">
    <div class="add-post-section">
        <button class="custom-btn primary" @onclick="ShowAddForm">ÏÉà Ìè¨Ïä§Ìä∏ Ï∂îÍ∞Ä</button>
    </div>

    <div class="blog-header">
        <!-- Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ ÏÑπÏÖò -->
        <div class="search-filter-section">
            <div class="search-controls">
                <div class="filter-controls">
                    <input type="text" class="form-control" placeholder="ÌÉúÍ∑∏ ÌïÑÌÑ∞..." 
                           @bind="tagFilter" @bind:event="oninput" @onkeydown="@(async (e) => { if (e.Key == "Enter") await SearchPosts(); })">
                </div>
                <div class="search-input-group">
                    <input type="text" class="form-control" placeholder="Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..." 
                           @bind="searchQuery" @bind:event="oninput" @onkeydown="@(async (e) => { if (e.Key == "Enter") await SearchPosts(); })">
                </div>
                <div class="page-size-controls">
                    <select class="form-select" value="@pageSize" @onchange="OnPageSizeChanged">
                        <option value="5">5Í∞úÏî©</option>
                        <option value="10">10Í∞úÏî©</option>
                        <option value="20">20Í∞úÏî©</option>
                    </select>
                </div>
                <div class="search-button-group">
                    <button class="custom-btn secondary icon" type="button" @onclick="SearchPosts" title="Í≤ÄÏÉâ">
                        üîç
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(searchQuery) || !string.IsNullOrEmpty(tagFilter))
                {
                    <div class="clear-filters">
                        <button class="custom-btn secondary small" @onclick="ClearFilters">
                            ‚ùå ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p class="loading">Ìè¨Ïä§Ìä∏Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
    }
    else if (pagedResult?.Items == null || !pagedResult.Items.Any())
    {
        <div class="no-posts-container">
            <div class="no-posts-icon">üìù</div>
            <p class="no-posts">
                @if (!string.IsNullOrEmpty(searchQuery) || !string.IsNullOrEmpty(tagFilter))
                {
                    <span>Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.</span>
                }
                else
                {
                    <span>Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.</span>
                }
            </p>
        </div>
    }
    else
    {
        @foreach (var post in pagedResult.Items)
        {
            <article class="post">
                <div class="post-header">
                    <div class="post-header-left">
                        <h2 class="post-title">
                            <a href="/blog/@UserId/@post.Id?returnUrl=@Uri.EscapeDataString(Navigation.Uri)" class="post-title-link">@post.Title</a>
                        </h2>
                        <div class="post-meta">
                            <span class="author">üë§ @post.Author</span> 
                            <span class="date">üìÖ @((post.Date != default(DateTime) ? post.Date : post.DatePublished ?? DateTime.MinValue).ToString("yyyy-MM-dd"))</span>
                            @if (!string.IsNullOrEmpty(post.Tags))
                            {
                                <span class="tags">
                                    üè∑Ô∏è 
                                    @foreach (var tag in post.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="tag" @onclick="() => FilterByTag(tag.Trim())">@tag.Trim()</span>
                                    }
                                </span>
                            }
                        </div>
                    </div>
                    <div class="post-actions">
                        <button class="custom-btn warning icon" @onclick="() => EditPost(post)" title="ÏàòÏ†ï">
                            ‚úèÔ∏è
                        </button>
                        <button class="custom-btn danger icon" @onclick="() => DeletePost(post.Id)" title="ÏÇ≠Ï†ú">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(post.Summary))
                {
                    <p class="post-summary">@((MarkupString)MarkdownService.ToHtml(post.Summary))</p>
                }
            </article>
        }

        <!-- ÌéòÏù¥Ïßï Ïª¥Ìè¨ÎÑåÌä∏ -->
        <div class="pagination-wrapper">
            <Pagination Result="pagedResult" OnPageChanged="LoadPage" />
        </div>
    }
</div>

@if (editingPost != null)
{
    <EditPostModal editingPost="@editingPost" IsNewPost="@isNewPost" OnUpdate="@UpdatePostFromModal" OnAdd="@AddPostFromModal" OnCancel="@CancelEdit" />
}

<style>
    .add-post-section {
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: flex-end;
    }

    .blog-header {
        margin-bottom: 2rem;
        padding: 1rem;
        background: var(--bg-secondary);
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
    }

    .search-filter-section {
        margin: 0;
    }

    .search-controls {
        display: flex;
        flex-direction: row;
        gap: 0.75rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .filter-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .search-input-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        flex: 1;
        min-width: 250px;
    }

    .page-size-controls {
        display: flex;
        align-items: center;
    }

    .search-button-group {
        display: flex;
        align-items: center;
    }

    .clear-filters {
        margin: 0;
    }

    .form-control, .form-select {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        font-size: 0.9rem;
        background: var(--bg-primary);
        color: var(--text-primary);
        transition: border-color 0.2s ease;
    }

    .form-control:focus, .form-select:focus {
        outline: none;
        border-color: var(--accent-color);
    }

    .search-input-group .form-control {
        flex: 1;
        min-width: 200px;
    }

    .filter-controls .form-control {
        width: 150px;
    }

    .page-size-controls .form-select {
        width: 100px;
    }

    .loading-container {
        text-align: center;
        padding: 3rem 1rem;
        color: var(--text-secondary);
    }

    .spinner {
        width: 2rem;
        height: 2rem;
        border: 0.25rem solid var(--border-color);
        border-top: 0.25rem solid var(--accent-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .no-posts-container {
        text-align: center;
        padding: 3rem 1rem;
        color: var(--text-secondary);
    }

    .no-posts-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.6;
    }

    .no-posts {
        font-size: 1.1rem;
        margin: 0;
    }

    .post-title-link {
        color: var(--text-primary);
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .post-title-link:hover {
        color: var(--accent-color);
        text-decoration: underline;
    }

    .post-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.5rem;
    }

    .post-meta .author,
    .post-meta .date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .post-meta .tags {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        flex-wrap: wrap;
    }

    .tag {
        background: var(--bg-secondary);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .tag:hover {
        background: var(--accent-color);
        color: var(--text-on-accent);
        border-color: var(--accent-color);
    }

    .custom-btn.small {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
    }

    .pagination-wrapper {
        margin-top: 3rem;
        padding: 1.5rem 0;
        border-top: 1px solid var(--border-color);
    }

    /* Î™®Î∞îÏùº Î∞òÏùëÌòï */
    @@media (max-width: 768px) {
        .search-controls {
            flex-direction: column;
            align-items: stretch;
            gap: 0.75rem;
        }
        
        .search-input-group {
            min-width: auto;
        }
        
        .filter-controls,
        .page-size-controls,
        .search-button-group {
            justify-content: center;
        }
        
        .search-input-group .form-control {
            min-width: auto;
        }
        
        .filter-controls .form-control,
        .page-size-controls .form-select {
            width: 100%;
        }
        
        .post-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
    }
</style>

@code {
    [Parameter]
    public string? UserId { get; set; }

    private PagedResult<Models.BlogPost>? pagedResult;
    private List<Models.BlogPost>? posts; // Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Ïú†ÏßÄ
    private Models.BlogPost? editingPost;
    private bool isNewPost = false;
    private BlogMeta? blogMeta;
    
    // ÌéòÏù¥Ïßï Í¥ÄÎ†® ÌïÑÎìú
    private string searchQuery = "";
    private string tagFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            Navigation.NavigateTo("/");
            return;
        }

        // URL ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÏÉÅÌÉú Î≥µÏõê
        var uri = new Uri(Navigation.Uri);
        var queryDictionary = HttpUtility.ParseQueryString(uri.Query);
        
        if (int.TryParse(queryDictionary["page"], out int page) && page > 0)
        {
            currentPage = page;
        }
        
        if (int.TryParse(queryDictionary["pageSize"], out int size) && size > 0)
        {
            pageSize = size;
        }
        
        searchQuery = queryDictionary["search"] ?? "";
        tagFilter = queryDictionary["tag"] ?? "";

        await LoadPosts();
        await LoadMeta();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            Navigation.NavigateTo("/");
            return;
        }

        // URL ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÏÉÅÌÉú Î≥µÏõê
        var uri = new Uri(Navigation.Uri);
        var queryDictionary = HttpUtility.ParseQueryString(uri.Query);
        
        var newPage = 1;
        var newPageSize = 10;
        var newSearchQuery = "";
        var newTagFilter = "";
        
        if (int.TryParse(queryDictionary["page"], out int page) && page > 0)
        {
            newPage = page;
        }
        
        if (int.TryParse(queryDictionary["pageSize"], out int size) && size > 0)
        {
            newPageSize = size;
        }
        
        newSearchQuery = queryDictionary["search"] ?? "";
        newTagFilter = queryDictionary["tag"] ?? "";

        // ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎêú Í≤ΩÏö∞ÏóêÎßå ÏóÖÎç∞Ïù¥Ìä∏
        if (newPage != currentPage || newPageSize != pageSize || 
            newSearchQuery != searchQuery || newTagFilter != tagFilter)
        {
            currentPage = newPage;
            pageSize = newPageSize;
            searchQuery = newSearchQuery;
            tagFilter = newTagFilter;
            
            await LoadPosts();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (pagedResult?.Items != null && pagedResult.Items.Any())
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("enhanceMarkdownContent");
                Console.WriteLine("enhanceMarkdownContent called successfully");
                
                // Ïù¥ÎØ∏ÏßÄ Í∞§Îü¨Î¶¨ Ìï∏Îì§Îü¨ ÏÉàÎ°úÍ≥†Ïπ®
                await JSRuntime.InvokeVoidAsync("ImageGallery.refreshImageHandlers");
                Console.WriteLine("ImageGallery.refreshImageHandlers called successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JavaScript Ìï®Ïàò Ìò∏Ï∂ú Ïã§Ìå®: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Ìè¨Ïä§Ìä∏ Î™©Î°ùÏùÑ Î°úÎìúÌï©ÎãàÎã§.
    /// </summary>
    private async Task LoadPosts()
    {
        if (string.IsNullOrEmpty(UserId)) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var request = new PagedRequest
            {
                Page = currentPage,
                PageSize = pageSize,
                Search = string.IsNullOrWhiteSpace(searchQuery) ? null : searchQuery,
                Tag = string.IsNullOrWhiteSpace(tagFilter) ? null : tagFilter
            };

            pagedResult = await BlogApiService.GetPagedPostsAsync(UserId, request);
            
            // Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ postsÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
            posts = pagedResult?.Items?.ToList() ?? new List<Models.BlogPost>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ìè¨Ïä§Ìä∏ Î°úÎìú Ïã§Ìå®: {ex.Message}");
            pagedResult = new PagedResult<Models.BlogPost>
            {
                Items = new List<Models.BlogPost>(),
                TotalCount = 0,
                CurrentPage = currentPage,
                PageSize = pageSize
            };
            posts = new List<Models.BlogPost>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// ÌòÑÏû¨ ÏÉÅÌÉúÎ•º URLÏóê Î∞òÏòÅÌï©ÎãàÎã§.
    /// </summary>
    private void UpdateUrl()
    {
        var queryParams = new List<string>();
        
        if (currentPage > 1)
            queryParams.Add($"page={currentPage}");
            
        if (pageSize != 10)
            queryParams.Add($"pageSize={pageSize}");
            
        if (!string.IsNullOrEmpty(searchQuery))
            queryParams.Add($"search={Uri.EscapeDataString(searchQuery)}");
            
        if (!string.IsNullOrEmpty(tagFilter))
            queryParams.Add($"tag={Uri.EscapeDataString(tagFilter)}");
        
        var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";
        var newUrl = $"/blog/{UserId}{queryString}";
        
        Navigation.NavigateTo(newUrl, replace: true);
    }

    /// <summary>
    /// Í≤ÄÏÉâÏùÑ Ïã§ÌñâÌï©ÎãàÎã§.
    /// </summary>
    private async Task SearchPosts()
    {
        currentPage = 1; // Í≤ÄÏÉâ Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        UpdateUrl();
        await LoadPosts();
    }

    /// <summary>
    /// ÌïÑÌÑ∞Î•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
    /// </summary>
    private async Task ClearFilters()
    {
        searchQuery = "";
        tagFilter = "";
        currentPage = 1;
        UpdateUrl();
        await LoadPosts();
    }

    /// <summary>
    /// ÌÉúÍ∑∏Î°ú ÌïÑÌÑ∞ÎßÅÌï©ÎãàÎã§.
    /// </summary>
    /// <param name="tag">ÌïÑÌÑ∞ÎßÅÌï† ÌÉúÍ∑∏</param>
    private async Task FilterByTag(string tag)
    {
        tagFilter = tag;
        currentPage = 1;
        UpdateUrl();
        await LoadPosts();
    }

    /// <summary>
    /// ÌéòÏù¥ÏßÄ ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏Î•º Ï≤òÎ¶¨Ìï©ÎãàÎã§.
    /// </summary>
    /// <param name="e">Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏</param>
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // ÌéòÏù¥ÏßÄ ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            UpdateUrl();
            await LoadPosts();
        }
    }

    /// <summary>
    /// ÏßÄÏ†ïÎêú ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.
    /// </summary>
    /// <param name="page">Ïù¥ÎèôÌï† ÌéòÏù¥ÏßÄ Î≤àÌò∏</param>
    private async Task LoadPage(int page)
    {
        currentPage = page;
        UpdateUrl();
        await LoadPosts();
    }

    private async Task LoadMeta()
    {
        if (string.IsNullOrEmpty(UserId)) return;

        blogMeta = await BlogApiService.GetBlogMetaAsync(UserId);
        if (blogMeta == null)
        {
            blogMeta = new BlogMeta { Title = $"{UserId} Î∏îÎ°úÍ∑∏" };
        }
        
        // ÌéòÏù¥ÏßÄ ÌÉÄÏù¥ÌãÄ ÏóÖÎç∞Ïù¥Ìä∏
        await UpdatePageTitle();
    }

    /// <summary>
    /// ÌéòÏù¥ÏßÄ ÌÉÄÏù¥ÌãÄÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
    /// </summary>
    private async Task UpdatePageTitle()
    {
        if (blogMeta != null && !string.IsNullOrEmpty(blogMeta.Title))
        {
            await JSRuntime.InvokeVoidAsync("updatePageTitle", $"{blogMeta.Title} - SlogEngine");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("updatePageTitle", "SlogEngine");
        }
    }

    private void ShowAddForm()
    {
        editingPost = new Models.BlogPost
        {
            Id = Guid.NewGuid().ToString(),
            Title = "",
            Summary = "",
            Content = "",
            Author = UserId ?? "",
            Date = DateTime.Now
        };
        isNewPost = true;
        StateHasChanged();
    }

    private void EditPost(Models.BlogPost post)
    {
        Console.WriteLine($"EditPost called for post: {post.Title}");
        editingPost = new Models.BlogPost
        {
            Id = post.Id,
            Title = post.Title,
            Summary = post.Summary,
            Content = post.Content,
            Author = post.Author,
            Date = post.Date
        };
        isNewPost = false;
        Console.WriteLine($"editingPost set: {editingPost?.Title}");
        StateHasChanged(); // UI ÏóÖÎç∞Ïù¥Ìä∏ Í∞ïÏ†ú Ïã§Ìñâ
        Console.WriteLine("StateHasChanged called");
    }

    private void CancelEdit()
    {
        editingPost = null;
        isNewPost = false;
        StateHasChanged(); // UI ÏóÖÎç∞Ïù¥Ìä∏ Í∞ïÏ†ú Ïã§Ìñâ
    }

    private async Task AddPostFromModal(Models.BlogPost newPost)
    {
        if (string.IsNullOrEmpty(UserId) || newPost == null) 
        {
            Console.WriteLine($"AddPostFromModal: UserId={UserId}, newPost is null: {newPost == null}");
            return;
        }

        Console.WriteLine($"AddPostFromModal: Adding new post with title: {newPost.Title}");
        var success = await BlogApiService.AddPostAsync(UserId, newPost);
        Console.WriteLine($"AddPostFromModal: Add result: {success}");
        
        if (success)
        {
            editingPost = null;
            isNewPost = false;
            await LoadPosts(); // ÌéòÏù¥ÏßïÎêú Î™©Î°ùÏùÑ ÏÉàÎ°úÍ≥†Ïπ®
        }
    }

    private async Task UpdatePostFromModal(Models.BlogPost updatedPost)
    {
        if (string.IsNullOrEmpty(UserId) || updatedPost == null) 
        {
            Console.WriteLine($"UpdatePostFromModal: UserId={UserId}, updatedPost is null: {updatedPost == null}");
            return;
        }

        Console.WriteLine($"UpdatePostFromModal: Updating post {updatedPost.Id} with title: {updatedPost.Title}");
        var success = await BlogApiService.UpdatePostAsync(UserId, updatedPost.Id, updatedPost);
        Console.WriteLine($"UpdatePostFromModal: Update result: {success}");
        
        if (success)
        {
            editingPost = null;
            isNewPost = false;
            await LoadPosts(); // ÌéòÏù¥ÏßïÎêú Î™©Î°ùÏùÑ ÏÉàÎ°úÍ≥†Ïπ®
        }
    }

    private async Task DeletePost(string postId)
    {
        if (string.IsNullOrEmpty(UserId)) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if (!confirmed) return;

        var success = await BlogApiService.DeletePostAsync(UserId, postId);
        if (success)
        {
            await LoadPosts(); // ÌéòÏù¥ÏßïÎêú Î™©Î°ùÏùÑ ÏÉàÎ°úÍ≥†Ïπ®
        }
    }
}
